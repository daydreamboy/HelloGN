import("//build/config/android/deployment_target.gni")

declare_args() {
  # Configure whether whole module optimization is enabled when compiling
  # swift modules.
  swift_whole_module_optimization = true
}

# Note: define a template named "android_toolchain"
template("android_toolchain") {
  toolchain(target_name) {
    assert(defined(invoker.toolchain_args),
           "Toolchains must declare toolchain_args")

    toolchain_args = {
      forward_variables_from(invoker.toolchain_args, "*")
    }

    # Note: turn on this line, if when debug GN
    #print("python3 sdk_info.py --target-cpu $current_cpu --target-environment $target_environment --deployment-target $ios_deployment_target")

    _sdk_info = exec_script("//build/config/android/scripts/sdk_info.py",
                            [
                              "--target-cpu",
                              current_cpu,
                              "--target-environment",
                              target_environment,
                              "--min-sdk-version",
                              min_sdk_version,
                            ],
                            "json")

    cc = "${_sdk_info.clang_path} --target=${_sdk_info.target} --sysroot=${_sdk_info.toolchain_path}/llvm/prebuilt/darwin-x86_64/sysroot -MD -MT"
    cxx = "${_sdk_info.clangcpp_path} --target=${_sdk_info.target} --sysroot=${_sdk_info.toolchain_path}/llvm/prebuilt/darwin-x86_64/sysroot -MD -MT"

    tool("link") {
      output = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = output + ".rsp"
      rspfile_content = "{{inputs_newline}}"

      outputs = [ output ]
      command = "$cxx {{ldflags}} -o $output -Wl,-filelist,$rspfile {{libs}} {{solibs}} {{frameworks}} {{swiftmodules}}"
      description = "LINK {{output}}"

      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ""
      output_prefix = ""
    }

    tool("solink") {
      dylib = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = dylib + ".rsp"
      rspfile_content = "{{inputs_newline}}"

      #LANGUAGE_COMPILE_FLAGS = "-g -DANDROID -fdata-sections -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security   -fno-limit-debug-info"

      LINK_FLAGS = "-static-libstdc++ -Wl,--build-id=sha1 -Wl,--fatal-warnings -Wl,--gc-sections -Wl,--no-undefined -Qunused-arguments"
      LINK_LIBRARIES = "/Users/wesley_chen/Library/Android/sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/lib/x86_64-linux-android/33/liblog.so  -latomic -lm"

      outputs = [ dylib ]
      command = "$cxx {{ldflags}} $LINK_FLAGS -fPIC -shared -o $dylib {{inputs}} $LINK_LIBRARIES"
      description = "SOLINK {{output}}"

      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".so"
      output_prefix = "lib"
    }

    tool("alink") {
      command = "rm -f {{output}} && ar rcs {{output}} {{inputs}}"
      description = "AR {{target_output_name}}{{output_extension}}"

      outputs =
          [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("cc") {
      depfile = "{{output}}.d"
      precompiled_header_type = "gcc"
      command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      precompiled_header_type = "gcc"
      command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [ "{{target_out_dir}}/{{label_name}}/{{source_name_part}}.o" ]
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }
  }
}

# Note: use `android_toolchain` template to define `clang_x86` toolchain
android_toolchain("clang_x86") {
  toolchain_args = {
    current_cpu = "x86"
    current_os = "android"
  }
}

# Note: use `android_toolchain` template to define `clang_x64` toolchain
android_toolchain("clang_x64") {
  toolchain_args = {
    current_cpu = "x64"
    current_os = "android"
  }
}

# Note: use `android_toolchain` template to define `clang_arm` toolchain
android_toolchain("clang_arm") {
  toolchain_args = {
    current_cpu = "arm"
    current_os = "android"
  }
}

# Note: use `android_toolchain` template to define `clang_arm64` toolchain
android_toolchain("clang_arm64") {
  toolchain_args = {
    current_cpu = "arm64"
    current_os = "android"
  }
}
