
config("fml_config") {
  include_dirs = [ ".." ]
}

source_set("fml") {
  sources = [
    "access_private.h",
    "arraysize.h",
    "atomic_sequence_num.h",
    "base64.cc",
    "base64.h",
    "build_config.h",
    "closure.h",
    "compiler_specific.h",
    "concurrent_message_loop.h",
    "concurrent_message_loop.cc",
    "eintr_wrapper.h",
    "export.h",
    "file.cc",
    "file.h",
    "guid.cc",
    "guid.h",
    "hyper_function.h",
    "log_level.h",
    "log_settings.cc",
    "log_settings.h",
    "log_settings_state.cc",
    "logging.cc",
    "logging.h",
    "macros.h",
    "make_copyable.h",
    "mapping.cc",
    "mapping.h",
    "md5.cc",
    "md5.h",
    "memory/ref_counted.h",
    "memory/ref_counted_internal.h",
    "memory/ref_ptr.h",
    "memory/ref_ptr_internal.h",
    "memory/thread_checker.h",
    "memory/weak_ptr.h",
    "memory/weak_ptr_internal.cc",
    "memory/weak_ptr_internal.h",
    "message_loop.cc",
    "message_loop.h",
    "message_loop_impl.cc",
    "message_loop_impl.h",
    "modp_b64/modp_b64.cc",
    "modp_b64/modp_b64.h",
    "mru_cache.h",
    "native_library.h",
    "numerics/safe_conversions.h",
    "numerics/safe_conversions_impl.h",
    "numerics/safe_math.h",
    "numerics/safe_math_impl.h",
    "paths.cc",
    "paths.h",
    "rand_util.cc",
    "rand_util.h",
    "scoped_clear_errno.h",
    "strings/stringprintf.cc",
    "strings/stringprintf.h",
    "strings/string_number_conversions.cc",
    "strings/string_number_conversions.h",
    "strings/stringprintf.h",
    "strings/string_split.cc",
    "strings/string_split.h",
    "strings/string_tokenizer.h",
    "strings/string_util.cc",
    "strings/string_util.h",
    "strings/string_util_constants.cc",
    "synchronization/atomic_object.h",
    "synchronization/count_down_latch.cc",
    "synchronization/count_down_latch.h",
    "synchronization/semaphore.cc",
    "synchronization/semaphore.h",
    "synchronization/thread_annotations.h",
    "synchronization/thread_checker.h",
    "synchronization/waitable_event.cc",
    "synchronization/waitable_event.h",
    "task_runner.cc",
    "task_runner.h",
    "template_util.h",
    "thread.cc",
    "thread.h",
    "thread_local.cc",
    "thread_local.h",
    "time/time_delta.h",
    "time/time_point.cc",
    "time/time_point.h",
    "unique_fd.cc",
    "unique_fd.h",
    "unique_object.h",
    "values.cc",
    "values.h",
    "weak_bind.h",
  ]

  deps = []

  libs = []
  frameworks = []

  public_configs = [ ":fml_config" ]

  if (is_ios || is_mac) {
    sources += [
      "platform/darwin/cf_utils.cc",
      "platform/darwin/cf_utils.h",
      "platform/darwin/message_loop_darwin.h",
      "platform/darwin/message_loop_darwin.mm",
      "platform/darwin/paths_darwin.mm",
      "platform/darwin/platform_version.h",
      "platform/darwin/platform_version.mm",
      "platform/darwin/scoped_block.h",
      "platform/darwin/scoped_block.mm",
      "platform/darwin/scoped_nsobject.h",
      "platform/darwin/scoped_nsobject.mm",
    ]

    frameworks += [ "Foundation.framework" ]
  }

  if (is_android) {
    sources += [
      "platform/android/jni_util.cc",
      "platform/android/jni_util.h",
      "platform/android/jni_weak_ref.cc",
      "platform/android/jni_weak_ref.h",
      "platform/android/message_loop_android.cc",
      "platform/android/message_loop_android.h",
      "platform/android/paths_android.cc",
      "platform/android/paths_android.h",
      "platform/android/scoped_java_ref.cc",
      "platform/android/scoped_java_ref.h",
    ]

    libs += [ "android" ]
  }

  if (is_android) {
    sources += [
      "platform/linux/timerfd.cc",
      "platform/linux/timerfd.h",
    ]
  }

  if (is_linux) {
    sources += [
      "platform/linux/message_loop_linux.cc",
      "platform/linux/message_loop_linux.h",
      "platform/linux/paths_linux.cc",
      "platform/linux/timerfd.cc",
      "platform/linux/timerfd.h",
    ]
  }

  if (is_win) {
    sources += [
      "platform/win/errors_win.cc",
      "platform/win/errors_win.h",
      "platform/win/file_win.cc",
      "platform/win/mapping_win.cc",
      "platform/win/message_loop_win.cc",
      "platform/win/message_loop_win.h",
      "platform/win/native_library_win.cc",
      "platform/win/paths_win.cc",
      "platform/win/wstring_conversion.cc",
      "platform/win/wstring_conversion.h",
    ]
  } else {
    sources += [
      "platform/posix/file_posix.cc",
      "platform/posix/mapping_posix.cc",
      #"platform/posix/native_library_posix.cc",#手淘ios集成规范不允许出现dlopen/dlsym
      "platform/posix/paths_posix.cc",
    ]
  }
}

static_library("fml_static") {
  complete_static_lib = true
  
  public_configs = [ ":fml_config" ]

  deps = [
    ":fml",
  ]
}

executable("fml_unittests") {
  testonly = true

  sources = [
    "base64_unittest.cc",
    "file_unittest.cc",
    "guid_unittest.cc",
    "md5_unittest.cc",
    "memory/ref_counted_unittest.cc",
    "memory/weak_ptr_unittest.cc",
    "message_loop_unittests.cc",
    "mru_cache_unittest.cc",
    "numerics/safe_numerics_unittest.cc",
    "paths_unittests.cc",
    "rand_util_unittest.cc",
    "scoped_clear_errno_unittest.cc",
    "strings/stringprintf_unittest.cc",
    "strings/string_split_unittest.cc",
    "strings/string_number_conversions_unittest.cc",
    "strings/string_tokenizer_unittest.cc",
    "strings/string_util_unittest.cc",
    "synchronization/count_down_latch_unittests.cc",
    "synchronization/thread_annotations_unittest.cc",
    "synchronization/thread_checker_unittest.cc",
    "synchronization/waitable_event_unittest.cc",
    "synchronization/semaphore_unittest.cc",
    "thread_local_unittests.cc",
    "thread_unittests.cc",
    "time/time_delta_unittest.cc",
    "time/time_point_unittest.cc",
    "time/time_unittest.cc",
    "values_unittest.cc",
  ]

  deps = [
    ":fml",
    # "//third_party/googletest:gtest",
    # "//third_party/googletest:gtest_main",
    # "//third_party/googletest:gmock",
    # "//third_party/googletest:gmock_main",
  ]
  
  if (is_win) {
    libs = [ "Rpcrt4.lib",
      "Advapi32.lib",
    ]
  }
}
